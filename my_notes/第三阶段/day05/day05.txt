1、作用域
   因为控制器是跟html元素标签相关联的，而html标签又有各自的作用范围，
   这也导致了控制器有各自的作用范围，最终导致$scope也有不同的作用范围
   根作用域：
      $rootScope,跟app绑定的，作用范围是整个app的范围
   子作用域：
      $scope，跟控制器绑定，作用范围就是控制器的范围

2、过滤器
   AngularJs使用过滤器(filter)来对数据进行格式化展示
   在表达式中{{}} 添加 | (管道符号)
   过滤器还可以在指令中使用
   如果需要传参，则在过滤器后面添加 : 在冒号后面添加参数
   内置过滤器：
      1.uppercase
      2.lowercase
      3.date
      4.currency 
      5.json      将传入的对象以json格式展示
      6.filter    从数组中选择一个子集
      7.limitTo   限制数组或字符串的长度,如果参数是正数，表示从头开始截取，如果参数是负数，则从后面开始截取
      8.number    给数字添加千位分隔符,如果没有参数，默认保留3位小数（四舍五入）
                     参数为正数时，保留小数后m位
                     参数为负数时，保留小数钱n位
      9.orderBy   给指定的数组排序
                     不传参数，默认排序，为升序
                     对象数组排序，需要传递参数，不然无法排序
                     参数为字符串时，按照对象中字符串的属性进行排序
                     参数为数组时，按照多个属性进行排序，第一个相同就比较第二个。。。
                     降序排序：
                        添加第三个参数 true(默认是false，升序)
                        还可以使用+ - 进行排序
                           +  升序
                           -  降序
   自定义过滤器
   使用应用模块调用filter方法：
   该方法有2个参数
   第一个参数：字符串，表示自定义过滤器的名称
   第二个参数：是function，表示该过滤器的功能作用

3、依赖注入
   angularjs采用的是模块化的组织方式，将通过代码封装成一个对象或者方法或者函数，用于提高代码的复用性，这样就出现使用者与被使用者的关系，即依赖关系
   而依赖注入，就是指在运行期间，自动查找依赖关系，然后将查找到的依赖传递给使用者
   常用的依赖注入有三种方式：
      1.行内注入
         将依赖写在数组中，程序会自动去根据依赖的名称查找对应的模块对象，如果名称写错，会导致查找失败(注入错误)，最后一个元素function的参数，建议使用依赖的名称，且顺序与其保持一致
      2.推断式注入
         使用时不声明依赖对象，而是将依赖对象直接作为参数传递给function,程序运行时，会根据function的参数名称，自动查找依赖对象
         所以，使用推断式注入，参数必须写正确
         代码经过压缩后，也会导致依赖找不到
         建议使用行内注入
      3.inject注入

      作业:
  自定义过滤器
    输入数据,格式化为-链接的形式
    输入字符串,下方同时显示大小写翻转的字符串
      a   ab   abC   abCd
      A   AB   ABc   ABcD
         
