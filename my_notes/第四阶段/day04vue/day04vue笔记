vue的选项
  1.选项就是在vue构造器中,配置功能的前缀(vue已经帮我们定义好了)
  Vue的选项有很多,比如:el,data,methods,template...
    1.template 模板
      模板定义:3种方式
        (1) 直接写在选项模板中
        (2) 写在template标签的模板,必须要有根节点
        (3) 写在 script 标签中的模板,不能跨文件引用
        模板声明了数据和最终展现给用户的DOM之间的映射关系
          data => DOM

  2.computed 计算属性
    当依赖的属性值发生变化时,会触发计算属性的重新计算(自动),
    数据或属性值没有发生变化,更新视图计算属性方法不会触发重新计算,还是计算之前的值.
    何时使用:当数据需要被处理之后再去使用的时候,就可以使用computed计算方法,这样可以节省性能

  3.watch 监听数据的变化
    观察者模式,数据发生变化,执行对应的逻辑

  4. 生命周期函数(钩子函数)
    Vue 实例有一个完整的生命周期:
      就是从实例开始创建,到初始化数据,编译模板,挂载DOM->渲染渲染,更新->渲染,到卸载实例等一系列过程,我们称之为Vue的生命周期.
      简单来说就是 Vue实例从创建到销毁的过程
    在  Vue 生命周期中,提供了一些钩子函数,给了我们执行自定义逻辑的机会.
    一共有8个
      1.beforeCreate  - 创建前
      2.created       - 创建后
      3.beforeMount   - 挂在前
      4.mounted       - 挂载后
      5.beforeUpdated - 变化前
      6.update        - 变化后
      7.beforeDestroy - 销毁前
      8.destroyed     - 销毁后 

- Vue 组件 component
  1. 组件是 vue 中最强大的功能之一.可以说vue的开发,就是组件的开发.
    react: css in JS html in JS
    Vue: template script style
  2.组件就是可服用的Vue实例,并且有一个名字
    制作组件其实就是制作自定义的标签,标签名要符合W3C规范

  3.注册组件: 全局注册 和 局部注册
    (1) 全局注册组件
        就是在构造器外部使用全局API Vue.component 来注册
    (2) 局部注册组件
          在 Vue 构造器内部注册,只能在内部使用,不能全局使用
  
  4.组件中的选项
    组件也是一个Vue实例,它里面也可以有Vue实例上的选项的
    比如: el,data,methods,template,除了 el
    
  5.组件中使用指令和事件

  6.父子组件
    在实际开发中我们经常会遇到在自定义组件中再嵌套一个组件,这就是父子组件

  7.组件之间的通信
    组件实例的作用域是相互独立的,这意味着不能直接使用子组件内的数据或修改父组件的数据.
    父子组件通信规则:
      (1) 父组件向子组件传递数据:
            在子组件中定义选项 props,在该选项中声明自定义属性
            在福组件中使用自定义属性来传值

      (2) 子组件向父组件传递数据:
          1.子组件通过$emit()方法向父组件派发一个自定义事件,向父组件传递数据
            $emit('自定义事件名',data1,data2...)
          2.父组件使用v-on来绑定这个自定义时间
            v-on:自定义事件 = 'callback'
            callback(data){
              //接收payload
            }

  8. 组件插槽 slot
    slot是组件的内容的扩展,可以使用slot给组件传递内容,组件接收并输出

  9.组件的引用
    组件之间的交互基本上通过props,$emit,slot,就可以实现,
    但是有的时候仍然需要直接访问组件中的内容,
    可以使用ref为组件定义一个引用ID,用 $refs.ID 名形式来访问组件内部

Vue 实例上的属性和方法
    我们可以通过实例上的属性和方法在构造器外部去使用,实例上的属性和方法都是以 $开头